{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPPVyoaN/r2irhhLdUXVjfC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# What is Phishing Threat?\n","<mark>**Phishing**</mark> is a type of <mark>cyber threat</mark> that involves the use of deceptive techniques to trick individuals into divulging sensitive information such as passwords, credit card numbers, or personal identification details. Typically, perpetrators masquerade as trustworthy entities, such as banks, government agencies, or reputable organizations, and attempt to lure targets into clicking on malicious links or providing confidential information through email, instant messaging, or other communication channels.\n","\n","Phishing attacks often employ various tactics to manipulate victims, such as creating urgent scenarios that demand immediate action or crafting messages that appear legitimate through the use of logos, language, and formatting similar to those used by the impersonated organization. Once the victim takes the bait and shares their sensitive information, it can be exploited for fraudulent activities like identity theft, financial fraud, or unauthorized access to accounts.\n","\n","Phishing threats continue to evolve, with perpetrators employing increasingly sophisticated techniques, including spear phishing (targeting specific individuals or organizations), pharming (redirecting users to fake websites), and vishing (using voice communication to deceive targets). Countermeasures against phishing include user education, email filtering systems, multi-factor authentication, and vigilance in scrutinizing incoming communications for signs of suspicious activity."],"metadata":{"id":"Glrf7umI1zwP"}},{"cell_type":"markdown","source":["# About Data\n","Here's how we could interpret each column:\n","\n","- `Domain_Age`: Age of the domain, which can be a factor in determining the legitimacy of a website. New domains may raise suspicions.\n","- `sld`: Second-level domain, often the main part of the domain name.\n","- `oc_8`: Occurrences of specific patterns in the domain name or URL.\n","- `Emails`: Presence of email addresses associated with the domain.\n","- `hex_32`: Presence of hexadecimal strings in the domain.\n","- `Domain_Name`: The full domain name.\n","- `puny_coded`: Whether the domain name is puny coded, which can be used in phishing attacks to spoof legitimate domains.\n","- `Page_Rank`: Page rank of the website, indicating its popularity or authority.\n","- `Alexa_Rank`: Alexa rank of the website, providing insight into its web traffic.\n","- `3gram`, `2gram`, `1gram`: Presence of specific n-grams in the domain name or URL.\n","- `distance_from_bad_words`: Distance of the domain from known bad words or patterns.\n","- `Country`, `State`: Geographic location of the domain.\n","- `hex_8`, `oc_32`, `len`, `typos`, `Registrar`, `dec_8`, `obfuscate_at_sign`, `entropy`, `numeric_percentage`, `Registrant_Name`, `subdomain`, `char_distribution`, `shortened`, `longest_word`, `Name_Server_Count`, `dec_32`: Various other features related to the structure and characteristics of the domain.\n","- `Creation_Date_Time`: Date and time when the domain was created.\n","- `Organization`: Organization associated with the domain.\n","- `tld`: Top-level domain.\n","- `label`: Indicates whether the instance is labeled as a phishing threat or not.\n","\n","This dataset appears to be rich in features that could be used to train machine learning models to classify domains as potential phishing threats or not. Each feature provides valuable information that could contribute to the model's decision-making process."],"metadata":{"id":"WqKC-lVw2Smp"}},{"cell_type":"markdown","source":["1. **What is phishing and how does it differ from other cyber attacks?**\n","- Phishing is a cyber attack where attackers impersonate legitimate entities to deceive individuals into revealing sensitive information or performing malicious actions. It differs from other attacks in its focus on social engineering and deception.\n","\n","2. **What are the common techniques used in phishing attacks?**\n","- Common techniques used in phishing attacks include email spoofing, website spoofing, social engineering, spear phishing, and whaling (targeting high-profile individuals).\n","\n","3. **How do attackers gather information for spear phishing campaigns?**  \n","- Attackers gather information for spear phishing campaigns through various means like social media research, data breaches, publicly available information, and reconnaissance on the target organization.\n","\n","4. **What are the indicators of a phishing email?**\n","- Indicators of a phishing email include suspicious sender addresses, generic greetings, urgent or threatening language, grammatical errors, requests for personal information, and suspicious attachments or links.\n","\n","5. **How can you identify a phishing website?**\n","- Phishing websites often have URL inconsistencies, misspellings, lack of HTTPS encryption, and may request sensitive information or prompt users to take malicious actions.\n","\n","6. **What are the potential consequences of falling victim to a phishing attack?**\n","- Consequences of falling victim to a phishing attack can include financial loss, identity theft, unauthorized access to accounts, malware infections, and damage to reputation.\n","\n","7. **How can you educate users about phishing and promote awareness?**\n","- User education about phishing can be promoted through awareness campaigns, training programs, simulated phishing exercises, and regular communication about the latest phishing techniques and prevention measures.\n","\n","8. **What are the latest trends and developments in phishing attacks?**\n","- Latest trends in phishing attacks include increased targeting of mobile devices, cloud-based services, and the use of AI-generated content to create convincing phishing messages.\n","\n","9. **How do attackers use social engineering in phishing attacks?**\n","- Attackers use social engineering techniques like pretexting, baiting, phishing calls, and impersonation to exploit human psychology and manipulate victims into taking actions that benefit the attacker.\n","\n","10. **Can you explain the concept of whaling and how it relates to phishing?**\n","- Whaling is a type of phishing attack that specifically targets high-ranking individuals or executives within an organization to gain access to sensitive information or perform fraudulent activities.\n","\n","11. **What are some effective methods for detecting and mitigating phishing attacks?**\n","- Effective methods for detecting and mitigating phishing attacks include user awareness training, implementing email authentication protocols (SPF, DKIM, DMARC), using anti-phishing software, and monitoring for suspicious activities.\n","\n","12. **How can organizations protect sensitive information from phishing attacks?**\n","- Organizations can protect sensitive information from phishing attacks by implementing strong security measures, conducting regular security assessments, enforcing access controls, and educating employees about best practices.\n","\n","13. **What role can machine learning and artificial intelligence play in detecting phishing attempts?**\n","- Machine learning and AI can assist in detecting phishing attempts by analyzing email patterns, identifying suspicious URLs, and recognizing phishing indicators based on historical data.\n","\n","14. **How do phishing attacks target mobile devices and what preventive measures can be taken?**\n","- Phishing attacks targeting mobile devices can be prevented by using security software, keeping devices up to date, avoiding suspicious links or apps, and enabling two-factor authentication.\n","\n","15. **What are the legal and ethical implications of phishing attacks?**\n","- Phishing attacks have legal and ethical implications, including potential violations of privacy laws, intellectual property theft, and breaches of trust.\n","\n","16. **Can you provide examples of notable phishing attacks that have occurred in recent years?**\n","- Notable phishing attacks in recent years include the Google Docs phishing attack, the DNC email hack, and the WannaCry ransomware campaign.\n","\n","17. **How can multi-factor authentication help in preventing phishing attacks?**\n","- Multi-factor authentication adds an extra layer of security to prevent phishing attacks by requiring users to provide additional verification, such as a fingerprint or SMS code, along with their password.\n","\n","18. **What are the challenges faced in investigating and prosecuting phishing attacks?**\n","- Investigating and prosecuting phishing attacks can be challenging due to the international nature of such attacks, the use of anonymizing technologies, and the difficulty in tracing attackers.\n","\n","19. **How do attackers use domain spoofing and email spoofing in phishing campaigns?**\n","- Attackers use domain spoofing to create websites that mimic legitimate ones, while email spoofing involves forging the sender's email address to appear as a trusted entity.\n","\n","20. **What are some emerging phishing techniques and how can organizations stay ahead of them?**\n","- Staying ahead of emerging phishing techniques requires continuous monitoring of security trends, keeping software and systems updated, and leveraging threat intelligence services to stay informed.\n","Certainly, here are the remaining questions and answers:\n","\n","21. **How can you differentiate between a legitimate email and a phishing email?**\n","- Differentiating between a legitimate email and a phishing email involves scrutinizing the sender's address, checking for suspicious content or requests, and verifying with the purported sender through a trusted channel.\n","\n","22. **What are the responsibilities of individuals and organizations in preventing phishing attacks?**\n","- Individuals should exercise caution by not clicking on suspicious links, not sharing sensitive information through email, and reporting phishing attempts. Organizations should implement robust security measures and educate employees.\n","\n","23. **How do attackers leverage social media platforms for phishing purposes?**\n","- Attackers leverage social media platforms for phishing by gathering personal information, creating convincing social engineering scenarios, and spreading phishing links or malware through social media messaging.\n","\n","24. **Can you explain the concept of pharming and how it relates to phishing?**\n","- Pharming is a type of attack that redirects users to fraudulent websites without their knowledge. It can be used in conjunction with phishing to deceive users into providing sensitive information.\n","\n","25. **What are the steps involved in incident response after a successful phishing attack?**\n","- Incident response after a phishing attack involves identifying the scope of the attack, containing the incident, removing any malware, notifying affected parties, and implementing measures to prevent future attacks.\n","\n","26. **How can user awareness training programs be designed to effectively combat phishing?**\n","- User awareness training programs should cover the basics of phishing, provide real-life examples, teach how to recognize and report phishing attempts, and reinforce good security practices.\n","\n","27. **What are the implications of GDPR and other data protection regulations on phishing attacks?**\n","- GDPR and other data protection regulations require organizations to implement measures to protect personal data from phishing attacks, report data breaches promptly, and provide adequate user education.\n","\n","28. **How can email authentication protocols like SPF, DKIM, and DMARC help prevent phishing?**\n","- Email authentication protocols like SPF, DKIM, and DMARC help prevent phishing by verifying the authenticity of the sender's domain, detecting email spoofing, and preventing malicious emails from reaching users' inboxes.\n","\n","29. **What are the characteristics of a well-crafted phishing email?**\n","- Well-crafted phishing emails often use social engineering tactics, include personalized information, create a sense of urgency, and imitate the branding and design of legitimate communications.\n","\n","30. **How can organizations collaborate with cybersecurity vendors and threat intelligence providers to combat phishing?**\n","- Collaboration with cybersecurity vendors and threat intelligence providers helps organizations stay updated on the latest phishing techniques, gain insights into emerging threats, and implement effective countermeasures.\n","\n","31. **What are the psychological tactics used by attackers to increase the success rate of phishing attacks?**\n","- Psychological tactics used by attackers in phishing attacks include exploiting emotions like fear, curiosity, or urgency, creating a sense of familiarity or authority, and employing persuasive language or social proof.\n","\n","32. **How do attackers exploit vulnerabilities in web browsers and plugins for phishing purposes?**\n","- Attackers exploit vulnerabilities in web browsers and plugins by injecting malicious code, using cross-site scripting (XSS) attacks, or redirecting users to phishing websites through compromised websites.\n","\n","33. **Can you explain the role of encryption in preventing phishing attacks?**\n","- Encryption can help prevent phishing attacks by securing communication channels, protecting sensitive information from interception, and verifying the authenticity of websites or email communication.\n","\n","34. **How does the use of AI-generated content impact phishing attacks?**\n","- The use of AI-generated content in phishing attacks allows attackers to create highly convincing messages that imitate human communication styles, making them harder to detect.\n","\n","35. **What are the implications of phishing attacks on cloud-based services and SaaS platforms?**\n","- Phishing attacks on cloud-based services and SaaS platforms can lead to unauthorized access to sensitive data, compromised user accounts, and potential disruptions to business operations.\n","\n","36. **How can organizations perform phishing simulations to evaluate their security posture?**\n","- Organizations can perform phishing simulations by sending simulated phishing emails to employees, monitoring their responses, and providing targeted training based on the results to improve security awareness.\n","\n","37. **What are the recommended incident response procedures for handling a phishing incident?**\n","- Recommended incident response procedures for handling a phishing incident include isolating affected systems, preserving evidence, notifying relevant stakeholders, conducting a forensic investigation, and implementing security improvements.\n","\n","38. **How do attackers use SMS and voice phishing (vishing) in their campaigns?**\n","- Attackers use SMS phishing (smishing) and voice phishing (vishing) to deceive users through text messages or phone calls, often impersonating legitimate entities to extract sensitive information.\n","\n","39. **How can organizations collaborate with law enforcement agencies to combat phishing attacks?**\n","- Collaboration with law enforcement agencies can help in investigating and prosecuting phishing attacks by sharing information, providing evidence, and leveraging specialized expertise.\n","\n","40. **What are the emerging regulatory frameworks and industry standards related to phishing prevention?**\n","- Emerging regulatory frameworks and industry standards related to phishing prevention focus on data protection, privacy, and cybersecurity, aiming to enforce stricter measures and promote best practices."],"metadata":{"id":"JswVO4-Uv3hu"}},{"cell_type":"code","source":["# from google.colab import drive\n","import pandas as pd\n","pd.set_option('display.max_columns', None)\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import plotly.express as px"],"metadata":{"id":"CxltHcljcjxT","executionInfo":{"status":"ok","timestamp":1708327236836,"user_tz":-300,"elapsed":2386,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# drive.mount('/content/drive')\n","# df = pd.read_excel(\"/content/drive/MyDrive/Project collaboration/cleaned_data.xlsx\")"],"metadata":{"id":"uXWD-1tA2hR_","executionInfo":{"status":"ok","timestamp":1708327237254,"user_tz":-300,"elapsed":9,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df = pd.read_excel(\"/content/cleaned_data.xlsx\")"],"metadata":{"id":"t4R43LVKdT2c","executionInfo":{"status":"ok","timestamp":1708327279275,"user_tz":-300,"elapsed":40563,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"g6e0kxN4dYEc","colab":{"base_uri":"https://localhost:8080/","height":660},"executionInfo":{"status":"ok","timestamp":1708327349572,"user_tz":-300,"elapsed":1030,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"56489f9f-caa9-43ef-b3bf-e68394c82271"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   Domain_Age      sld  oc_8  \\\n","0    136 days, 2:56:04.883605   900259     0   \n","1    136 days, 2:56:19.517778  koitera     0   \n","2  1282 days, 10:44:37.906362  koitera     0   \n","3  1282 days, 10:44:39.322353  koitera     0   \n","4    136 days, 2:56:20.715816   901360     0   \n","\n","                                              Emails  hex_32  \\\n","0  ['abuse@gmo.jp', 'proxy@whoisprotectservice.com']       0   \n","1  ['abuse@gmo.jp', 'proxy@whoisprotectservice.com']       0   \n","2  ['abuse@gmo.jp', 'proxy@whoisprotectservice.com']       0   \n","3  ['abuse@gmo.jp', 'proxy@whoisprotectservice.com']       0   \n","4  ['abuse@gmo.jp', 'proxy@whoisprotectservice.com']       0   \n","\n","                      Domain_Name  puny_coded  Page_Rank  Alexa_Rank  \\\n","0  ['0900259.COM', '0900259.com']           0         -1        -1.0   \n","1  ['KOITERA.NET', 'koitera.net']           0         -1        -1.0   \n","2  ['KOITERA.COM', 'koitera.com']           0         -1   7119972.0   \n","3  ['KOITERA.COM', 'koitera.com']           0         -1   7119972.0   \n","4  ['0901360.COM', '0901360.com']           0         -1        -1.0   \n","\n","                                 3gram  \\\n","0  ['090', '900', '002', '025', '259']   \n","1  ['koi', 'oit', 'ite', 'ter', 'era']   \n","2  ['koi', 'oit', 'ite', 'ter', 'era']   \n","3  ['koi', 'oit', 'ite', 'ter', 'era']   \n","4  ['090', '901', '013', '136', '360']   \n","\n","                             distance_from_bad_words Country  hex_8  oc_32  \\\n","0  {'2': 5.740530303030303, '0': 5.74431818181818...      JP      0      0   \n","1  {'ko': 5.331439393939394, 'it': 5.178030303030...      JP      0      0   \n","2  {'ko': 5.331439393939394, 'it': 5.178030303030...      JP      0      0   \n","3  {'ko': 5.331439393939394, 'it': 5.178030303030...      JP      0      0   \n","4  {'3': 5.744318181818182, '6': 5.74431818181818...      JP      0      0   \n","\n","   len                              typos           Registrar  dec_8  \\\n","0    8   [('qq.com', 86), ('vk.com', 86)]  GMO INTERNET, INC.      0   \n","1    8  [('php.net', 86), ('a8.net', 86)]  GMO INTERNET, INC.      0   \n","2    8   [('qq.com', 86), ('vk.com', 86)]  GMO INTERNET, INC.      0   \n","3   10   [('qq.com', 86), ('vk.com', 86)]  GMO INTERNET, INC.      0   \n","4    8   [('qq.com', 86), ('vk.com', 86)]  GMO INTERNET, INC.      0   \n","\n","                                  2gram  State  \\\n","0  ['09', '90', '00', '02', '25', '59']  Tokyo   \n","1  ['ko', 'oi', 'it', 'te', 'er', 'ra']  Tokyo   \n","2  ['ko', 'oi', 'it', 'te', 'er', 'ra']  Tokyo   \n","3  ['ko', 'oi', 'it', 'te', 'er', 'ra']  Tokyo   \n","4  ['09', '90', '01', '13', '36', '60']  Tokyo   \n","\n","                                 1gram obfuscate_at_sign   entropy  \\\n","0  ['0', '9', '0', '0', '2', '5', '9']                 0  1.780639   \n","1  ['k', 'o', 'i', 't', 'e', 'r', 'a']                 0  2.625000   \n","2  ['k', 'o', 'i', 't', 'e', 'r', 'a']                 0  2.625000   \n","3  ['k', 'o', 'i', 't', 'e', 'r', 'a']                 0  2.989735   \n","4  ['0', '9', '0', '1', '3', '6', '0']                 0  2.030639   \n","\n","   numeric_percentage       Registrant_Name  subdomain  \\\n","0           53.846154  REDACTED FOR PRIVACY        0.0   \n","1            0.000000  REDACTED FOR PRIVACY        0.0   \n","2            0.000000  REDACTED FOR PRIVACY        0.0   \n","3            0.000000  REDACTED FOR PRIVACY        1.0   \n","4           53.846154  REDACTED FOR PRIVACY        0.0   \n","\n","                                   char_distribution shortened longest_word  \\\n","0  defaultdict(<class 'int'>, {'2': 1, '9': 2, '0...        -1            9   \n","1  defaultdict(<class 'int'>, {'k': 1, 'a': 1, 'o...        -1          era   \n","2  defaultdict(<class 'int'>, {'k': 1, 'a': 1, 'o...        -1          era   \n","3  defaultdict(<class 'int'>, {'k': 1, 'p': 1, 'o...        -1          era   \n","4  defaultdict(<class 'int'>, {'3': 1, '6': 1, '9...        -1            0   \n","\n","  Name_Server_Count  dec_32   Creation_Date_Time  \\\n","0                 4       0  2019-06-11 12:32:01   \n","1                 8       0  2019-06-11 12:31:48   \n","2                 8       0  2016-04-21 04:43:31   \n","3                 8       0  2016-04-21 04:43:31   \n","4                 4       0  2019-06-11 12:31:51   \n","\n","                                     Organization  tld label  \n","0  Whois Privacy Protection Service by onamae.com  com  spam  \n","1  Whois Privacy Protection Service by onamae.com  net  spam  \n","2  Whois Privacy Protection Service by onamae.com  com  spam  \n","3  Whois Privacy Protection Service by onamae.com  com  spam  \n","4  Whois Privacy Protection Service by onamae.com  com  spam  "],"text/html":["\n","  <div id=\"df-270b6f69-ba16-48ac-b017-422f5e36e808\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Domain_Age</th>\n","      <th>sld</th>\n","      <th>oc_8</th>\n","      <th>Emails</th>\n","      <th>hex_32</th>\n","      <th>Domain_Name</th>\n","      <th>puny_coded</th>\n","      <th>Page_Rank</th>\n","      <th>Alexa_Rank</th>\n","      <th>3gram</th>\n","      <th>distance_from_bad_words</th>\n","      <th>Country</th>\n","      <th>hex_8</th>\n","      <th>oc_32</th>\n","      <th>len</th>\n","      <th>typos</th>\n","      <th>Registrar</th>\n","      <th>dec_8</th>\n","      <th>2gram</th>\n","      <th>State</th>\n","      <th>1gram</th>\n","      <th>obfuscate_at_sign</th>\n","      <th>entropy</th>\n","      <th>numeric_percentage</th>\n","      <th>Registrant_Name</th>\n","      <th>subdomain</th>\n","      <th>char_distribution</th>\n","      <th>shortened</th>\n","      <th>longest_word</th>\n","      <th>Name_Server_Count</th>\n","      <th>dec_32</th>\n","      <th>Creation_Date_Time</th>\n","      <th>Organization</th>\n","      <th>tld</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>136 days, 2:56:04.883605</td>\n","      <td>900259</td>\n","      <td>0</td>\n","      <td>['abuse@gmo.jp', 'proxy@whoisprotectservice.com']</td>\n","      <td>0</td>\n","      <td>['0900259.COM', '0900259.com']</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1.0</td>\n","      <td>['090', '900', '002', '025', '259']</td>\n","      <td>{'2': 5.740530303030303, '0': 5.74431818181818...</td>\n","      <td>JP</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>[('qq.com', 86), ('vk.com', 86)]</td>\n","      <td>GMO INTERNET, INC.</td>\n","      <td>0</td>\n","      <td>['09', '90', '00', '02', '25', '59']</td>\n","      <td>Tokyo</td>\n","      <td>['0', '9', '0', '0', '2', '5', '9']</td>\n","      <td>0</td>\n","      <td>1.780639</td>\n","      <td>53.846154</td>\n","      <td>REDACTED FOR PRIVACY</td>\n","      <td>0.0</td>\n","      <td>defaultdict(&lt;class 'int'&gt;, {'2': 1, '9': 2, '0...</td>\n","      <td>-1</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2019-06-11 12:32:01</td>\n","      <td>Whois Privacy Protection Service by onamae.com</td>\n","      <td>com</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>136 days, 2:56:19.517778</td>\n","      <td>koitera</td>\n","      <td>0</td>\n","      <td>['abuse@gmo.jp', 'proxy@whoisprotectservice.com']</td>\n","      <td>0</td>\n","      <td>['KOITERA.NET', 'koitera.net']</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1.0</td>\n","      <td>['koi', 'oit', 'ite', 'ter', 'era']</td>\n","      <td>{'ko': 5.331439393939394, 'it': 5.178030303030...</td>\n","      <td>JP</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>[('php.net', 86), ('a8.net', 86)]</td>\n","      <td>GMO INTERNET, INC.</td>\n","      <td>0</td>\n","      <td>['ko', 'oi', 'it', 'te', 'er', 'ra']</td>\n","      <td>Tokyo</td>\n","      <td>['k', 'o', 'i', 't', 'e', 'r', 'a']</td>\n","      <td>0</td>\n","      <td>2.625000</td>\n","      <td>0.000000</td>\n","      <td>REDACTED FOR PRIVACY</td>\n","      <td>0.0</td>\n","      <td>defaultdict(&lt;class 'int'&gt;, {'k': 1, 'a': 1, 'o...</td>\n","      <td>-1</td>\n","      <td>era</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2019-06-11 12:31:48</td>\n","      <td>Whois Privacy Protection Service by onamae.com</td>\n","      <td>net</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1282 days, 10:44:37.906362</td>\n","      <td>koitera</td>\n","      <td>0</td>\n","      <td>['abuse@gmo.jp', 'proxy@whoisprotectservice.com']</td>\n","      <td>0</td>\n","      <td>['KOITERA.COM', 'koitera.com']</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>7119972.0</td>\n","      <td>['koi', 'oit', 'ite', 'ter', 'era']</td>\n","      <td>{'ko': 5.331439393939394, 'it': 5.178030303030...</td>\n","      <td>JP</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>[('qq.com', 86), ('vk.com', 86)]</td>\n","      <td>GMO INTERNET, INC.</td>\n","      <td>0</td>\n","      <td>['ko', 'oi', 'it', 'te', 'er', 'ra']</td>\n","      <td>Tokyo</td>\n","      <td>['k', 'o', 'i', 't', 'e', 'r', 'a']</td>\n","      <td>0</td>\n","      <td>2.625000</td>\n","      <td>0.000000</td>\n","      <td>REDACTED FOR PRIVACY</td>\n","      <td>0.0</td>\n","      <td>defaultdict(&lt;class 'int'&gt;, {'k': 1, 'a': 1, 'o...</td>\n","      <td>-1</td>\n","      <td>era</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2016-04-21 04:43:31</td>\n","      <td>Whois Privacy Protection Service by onamae.com</td>\n","      <td>com</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1282 days, 10:44:39.322353</td>\n","      <td>koitera</td>\n","      <td>0</td>\n","      <td>['abuse@gmo.jp', 'proxy@whoisprotectservice.com']</td>\n","      <td>0</td>\n","      <td>['KOITERA.COM', 'koitera.com']</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>7119972.0</td>\n","      <td>['koi', 'oit', 'ite', 'ter', 'era']</td>\n","      <td>{'ko': 5.331439393939394, 'it': 5.178030303030...</td>\n","      <td>JP</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>[('qq.com', 86), ('vk.com', 86)]</td>\n","      <td>GMO INTERNET, INC.</td>\n","      <td>0</td>\n","      <td>['ko', 'oi', 'it', 'te', 'er', 'ra']</td>\n","      <td>Tokyo</td>\n","      <td>['k', 'o', 'i', 't', 'e', 'r', 'a']</td>\n","      <td>0</td>\n","      <td>2.989735</td>\n","      <td>0.000000</td>\n","      <td>REDACTED FOR PRIVACY</td>\n","      <td>1.0</td>\n","      <td>defaultdict(&lt;class 'int'&gt;, {'k': 1, 'p': 1, 'o...</td>\n","      <td>-1</td>\n","      <td>era</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2016-04-21 04:43:31</td>\n","      <td>Whois Privacy Protection Service by onamae.com</td>\n","      <td>com</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>136 days, 2:56:20.715816</td>\n","      <td>901360</td>\n","      <td>0</td>\n","      <td>['abuse@gmo.jp', 'proxy@whoisprotectservice.com']</td>\n","      <td>0</td>\n","      <td>['0901360.COM', '0901360.com']</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1.0</td>\n","      <td>['090', '901', '013', '136', '360']</td>\n","      <td>{'3': 5.744318181818182, '6': 5.74431818181818...</td>\n","      <td>JP</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>[('qq.com', 86), ('vk.com', 86)]</td>\n","      <td>GMO INTERNET, INC.</td>\n","      <td>0</td>\n","      <td>['09', '90', '01', '13', '36', '60']</td>\n","      <td>Tokyo</td>\n","      <td>['0', '9', '0', '1', '3', '6', '0']</td>\n","      <td>0</td>\n","      <td>2.030639</td>\n","      <td>53.846154</td>\n","      <td>REDACTED FOR PRIVACY</td>\n","      <td>0.0</td>\n","      <td>defaultdict(&lt;class 'int'&gt;, {'3': 1, '6': 1, '9...</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2019-06-11 12:31:51</td>\n","      <td>Whois Privacy Protection Service by onamae.com</td>\n","      <td>com</td>\n","      <td>spam</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-270b6f69-ba16-48ac-b017-422f5e36e808')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-270b6f69-ba16-48ac-b017-422f5e36e808 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-270b6f69-ba16-48ac-b017-422f5e36e808');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f2ffdbfd-15f1-469d-ae53-31e8f9852682\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2ffdbfd-15f1-469d-ae53-31e8f9852682')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f2ffdbfd-15f1-469d-ae53-31e8f9852682 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.shape"],"metadata":{"id":"0Me39fPreOKl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708327351103,"user_tz":-300,"elapsed":12,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"da4d8507-f4c1-45d0-afc6-b91751e9be10"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(50159, 35)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["((df.isnull().sum())/len(df))*100"],"metadata":{"id":"misZciPefcYu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708327352225,"user_tz":-300,"elapsed":441,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"5d436afc-4308-4ea6-dcc9-345c8260e889"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Domain_Age                 0.0\n","sld                        0.0\n","oc_8                       0.0\n","Emails                     0.0\n","hex_32                     0.0\n","Domain_Name                0.0\n","puny_coded                 0.0\n","Page_Rank                  0.0\n","Alexa_Rank                 0.0\n","3gram                      0.0\n","distance_from_bad_words    0.0\n","Country                    0.0\n","hex_8                      0.0\n","oc_32                      0.0\n","len                        0.0\n","typos                      0.0\n","Registrar                  0.0\n","dec_8                      0.0\n","2gram                      0.0\n","State                      0.0\n","1gram                      0.0\n","obfuscate_at_sign          0.0\n","entropy                    0.0\n","numeric_percentage         0.0\n","Registrant_Name            0.0\n","subdomain                  0.0\n","char_distribution          0.0\n","shortened                  0.0\n","longest_word               0.0\n","Name_Server_Count          0.0\n","dec_32                     0.0\n","Creation_Date_Time         0.0\n","Organization               0.0\n","tld                        0.0\n","label                      0.0\n","dtype: float64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.info()"],"metadata":{"id":"vK7YkWAlhdYr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708327354008,"user_tz":-300,"elapsed":558,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"448a4948-f35b-40ac-f583-d09cd8e45ad3"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 50159 entries, 0 to 50158\n","Data columns (total 35 columns):\n"," #   Column                   Non-Null Count  Dtype  \n","---  ------                   --------------  -----  \n"," 0   Domain_Age               50159 non-null  object \n"," 1   sld                      50159 non-null  object \n"," 2   oc_8                     50159 non-null  int64  \n"," 3   Emails                   50159 non-null  object \n"," 4   hex_32                   50159 non-null  int64  \n"," 5   Domain_Name              50159 non-null  object \n"," 6   puny_coded               50159 non-null  int64  \n"," 7   Page_Rank                50159 non-null  int64  \n"," 8   Alexa_Rank               50159 non-null  float64\n"," 9   3gram                    50159 non-null  object \n"," 10  distance_from_bad_words  50159 non-null  object \n"," 11  Country                  50159 non-null  object \n"," 12  hex_8                    50159 non-null  int64  \n"," 13  oc_32                    50159 non-null  int64  \n"," 14  len                      50159 non-null  int64  \n"," 15  typos                    50159 non-null  object \n"," 16  Registrar                50159 non-null  object \n"," 17  dec_8                    50159 non-null  int64  \n"," 18  2gram                    50159 non-null  object \n"," 19  State                    50159 non-null  object \n"," 20  1gram                    50159 non-null  object \n"," 21  obfuscate_at_sign        50159 non-null  object \n"," 22  entropy                  50159 non-null  float64\n"," 23  numeric_percentage       50159 non-null  float64\n"," 24  Registrant_Name          50159 non-null  object \n"," 25  subdomain                50159 non-null  float64\n"," 26  char_distribution        50159 non-null  object \n"," 27  shortened                50159 non-null  object \n"," 28  longest_word             50159 non-null  object \n"," 29  Name_Server_Count        50159 non-null  object \n"," 30  dec_32                   50159 non-null  int64  \n"," 31  Creation_Date_Time       50159 non-null  object \n"," 32  Organization             50159 non-null  object \n"," 33  tld                      50159 non-null  object \n"," 34  label                    50159 non-null  object \n","dtypes: float64(4), int64(9), object(22)\n","memory usage: 13.4+ MB\n"]}]},{"cell_type":"code","source":["# Calculate the average domain age\n","average_domain_age = phishing_data['Domain_Age'].mean()\n","print(\"Average Domain Age:\", average_domain_age)\n","\n","# Count the number of unique top-level domains (TLDs)\n","unique_tlds = phishing_data['tld'].nunique()\n","print(\"Number of Unique TLDs:\", unique_tlds)\n","\n","# Calculate the distribution of domain lengths\n","domain_length_distribution = phishing_data['len'].value_counts()\n","print(\"Domain Length Distribution:\")\n","print(domain_length_distribution)\n","\n","# Find the most common registrar companies associated with phishing domains\n","top_registrars = phishing_data['Registrar'].value_counts().head(5)\n","print(\"Top Registrars:\")\n","print(top_registrars)\n","\n","# Calculate the correlation between domain age and Alexa Rank\n","correlation = phishing_data['Domain_Age'].corr(phishing_data['Alexa_Rank'])\n","print(\"Correlation between Domain Age and Alexa Rank:\", correlation)\n","\n","# Count the number of unique email addresses associated with phishing domains\n","unique_email_addresses = phishing_data['Emails'].explode().nunique()\n","print(\"Number of Unique Email Addresses:\", unique_email_addresses)\n","\n","# Calculate the average distance from bad words for phishing domains\n","average_distance_from_bad_words = phishing_data['distance_from_bad_words'].mean()\n","print(\"Average Distance from Bad Words:\", average_distance_from_bad_words)\n","\n","# Count the number of phishing domains per country\n","phishing_domains_per_country = phishing_data['Country'].value_counts()\n","print(\"Phishing Domains per Country:\")\n","print(phishing_domains_per_country)\n","\n","# Check for common typos in phishing domain names\n","common_typos = phishing_data['typos'].value_counts().head(5)\n","print(\"Common Typos in Domain Names:\")\n","print(common_typos)\n","\n","# Calculate the distribution of 3-gram frequencies in phishing domains\n","trigram_distribution = phishing_data['3gram'].value_counts()\n","print(\"Trigram Distribution:\")\n","print(trigram_distribution)\n","\n","# Calculate the correlation between the number of name servers and domain age\n","correlation_ns_age = phishing_data['Name_Server_Count'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Name Server Count and Domain Age:\", correlation_ns_age)\n","\n","# Calculate the distribution of entropy values for phishing domains\n","entropy_distribution = phishing_data['entropy'].value_counts()\n","print(\"Entropy Distribution:\")\n","print(entropy_distribution)\n","\n","# Calculate the percentage of numeric characters in phishing domains\n","numeric_percentage = phishing_data['numeric_percentage'].mean()\n","print(\"Numeric Percentage:\", numeric_percentage)\n","\n","# Count the number of phishing domains with obfuscated \"@\" sign in email addresses\n","obfuscated_email_count = phishing_data[phishing_data['obfuscate_at_sign'] == 1].shape[0]\n","print(\"Phishing Domains with Obfuscated Email Addresses:\", obfuscated_email_count)\n","\n","# Calculate the average length of the longest word in phishing domain names\n","average_longest_word_length = phishing_data['longest_word'].mean()\n","print(\"Average Length of Longest Word:\", average_longest_word_length)\n","\n","# Calculate the correlation between domain age and the number of subdomains\n","correlation_subdomains_age = phishing_data['subdomain'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Subdomains and Domain Age:\", correlation_subdomains_age)\n","\n","# Calculate the distribution of label values (spam or not spam) in the dataset\n","label_distribution = phishing_data['label'].value_counts()\n","print(\"Label Distribution:\")\n","print(label_distribution)\n","\n","# Count the number of phishing domains with an organization associated with them\n","domains_with_organization = phishing_data['Organization'].notnull().sum()\n","print(\"Phishing Domains with Organization:\", domains_with_organization)\n","\n","# Calculate the average Alexa Rank of the phishing domains\n","average_alexa_rank = phishing_data['Alexa_Rank'].mean()\n","print(\"Average Alexa Rank:\", average_alexa_rank)\n","\n","# Calculate the correlation between creation date and domain age for phishing domains\n","correlation_creation_age = phishing_data['Creation_Date_Time'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Creation Date and Domain Age:\", correlation_creation_age)\n","\n","# Calculate the distribution of domain lengths for spam phishing domains\n","spam_domain_length_distribution = phishing_data[phishing_data['label'] == 'spam']['len'].value_counts()\n","print(\"Domain Length Distribution for Spam Phishing Domains:\")\n","print(spam_domain_length_distribution)\n","\n","# Count the number of phishing domains with a Page Rank greater than zero\n","page_rank_greater_than_zero = phishing_data[phishing_data['Page_Rank'] > 0].shape[0]\n","print(\"Phishing Domains with Page Rank > 0:\", page_rank_greater_than_zero)\n","\n","# Calculate the distribution of label values among different TLDs\n","tld_label_distribution = phishing_data.groupby(['tld', 'label']).size().unstack(fill_value=0)\n","print(\"Label Distribution among Different TLDs:\")\n","print(tld_label_distribution)\n","\n","# Check for common 2-grams in phishing domain names\n","common_2grams = phishing_data['2gram'].value_counts().head(5)\n","print(\"Common 2-grams in Domain Names:\")\n","print(common_2grams)\n","\n","# Calculate the average numeric percentage for spam phishing domains\n","average_numeric_percentage_spam = phishing_data[phishing_data['label'] == 'spam']['numeric_percentage'].mean()\n","print(\"Average Numeric Percentage for Spam Phishing Domains:\", average_numeric_percentage_spam)\n","\n","# Count the number of phishing domains with a specific creation year\n","specific_creation_year_count = phishing_data[phishing_data['Creation_Date_Time'].dt.year == 2021].shape[0]\n","print(\"Phishing Domains with Creation Year 2021:\", specific_creation_year_count)\n","\n","# Count the number of phishing domains with an obfuscated \"@\" sign in the email addresses\n","obfuscated_email_count = phishing_data[phishing_data['obfuscated_email'] == 1].shape[0]\n","print(\"Phishing Domains with Obfuscated Email Addresses:\", obfuscated_email_count)\n","\n","# Calculate the average 1-gram frequency for phishing domains\n","average_1gram_frequency = phishing_data['1gram_frequency'].mean()\n","print(\"Average 1-gram Frequency:\", average_1gram_frequency)\n","\n","# Count the number of phishing domains with a particular state associated with them\n","specific_state_count = phishing_data[phishing_data['State'] == 'California'].shape[0]\n","print(\"Phishing Domains with State 'California':\", specific_state_count)\n","\n","# Calculate the correlation between domain age and email domain extensions\n","correlation_extension_age = phishing_data['Domain_Age'].corr(phishing_data['Email_Extension'])\n","print(\"Correlation between Domain Age and Email Extension:\", correlation_extension_age)\n","\n","# Count the number of phishing domains with a specific organization associated with them\n","specific_organization_count = phishing_data[phishing_data['Organization'] == 'Example Organization'].shape[0]\n","print(\"Phishing Domains with Organization 'Example Organization':\", specific_organization_count)\n","\n","# Calculate the distribution of label values for the phishing domains with a specific label\n","specific_label_distribution = phishing_data[phishing_data['label'] == 'spam']['label'].value_counts()\n","print(\"Label Distribution for Spam Phishing Domains:\")\n","print(specific_label_distribution)\n","\n","# Count the number of phishing domains with a specific number of name servers\n","specific_ns_count = phishing_data[phishing_data['Name_Server_Count'] == 2].shape[0]\n","print(\"Phishing Domains with 2 Name Servers:\", specific_ns_count)\n","\n","# Calculate the average distance from bad words for the phishing domains with a specific label\n","average_distance_from_bad_words_label = phishing_data[phishing_data['label'] == 'spam']['distance_from_bad_words'].mean()\n","print(\"Average Distance from Bad Words for Spam Phishing Domains:\", average_distance_from_bad_words_label)\n","\n","# Count the number of phishing domains with a specific number of subdomains\n","specific_subdomain_count = phishing_data[phishing_data['subdomain'] == 1].shape[0]\n","print(\"Phishing Domains with 1 Subdomain:\", specific_subdomain_count)\n","\n","# Calculate the distribution of label values for the phishing domains in different countries\n","country_label_distribution = phishing_data.groupby(['Country', 'label']).size().unstack(fill_value=0)\n","print(\"Label Distribution for Phishing Domains in Different Countries:\")\n","print(country_label_distribution)\n","\n","# Count the number of phishing domains with a specific email domain extension\n","specific_extension_count = phishing_data[phishing_data['Email_Extension'] == 'example'].shape[0]\n","print(\"Phishing Domains with Email Extension 'example':\", specific_extension_count)\n","\n","# Calculate the average entropy value for the phishing domains with a specific label\n","average_entropy_label = phishing_data[phishing_data['label'] == 'spam']['entropy'].mean()\n","print(\"Average Entropy for Spam Phishing Domains:\", average_entropy_label)\n","\n","# Count the number of phishing domains with a specific number of characters in the email addresses\n","specific_email_length_count = phishing_data[phishing_data['Emails'].str.len() == 10].shape[0]\n","print(\"Phishing Domains with Email Length of 10:\", specific_email_length_count)\n","\n","# Calculate the distribution of label values for the phishing domains with a specific label\n","specific_label_distribution = phishing_data[phishing_data['label'] == 'spam']['label'].value_counts()\n","print(\"Label Distribution for Spam Phishing Domains:\")\n","print(specific_label_distribution)\n","\n","# Count the number of phishing domains with a specific label and organization associated with them\n","specific_label_organization_count = phishing_data[(phishing_data['label'] == 'spam') & (phishing_data['Organization'] == 'Example Organization')].shape[0]\n","print(\"Phishing Domains with Label 'spam' and Organization 'Example Organization':\", specific_label_organization_count)\n","\n","# Calculate the average numeric percentage for the phishing domains with a specific label\n","average_numeric_percentage_label = phishing_data[phishing_data['label'] == 'spam']['numeric_percentage'].mean()\n","print(\"Average Numeric Percentage for Spam Phishing Domains:\", average_numeric_percentage_label)\n","\n","# Count the number of phishing domains with a specific creation date and label combination\n","specific_creation_label_count = phishing_data[(phishing_data['Creation_Date_Time'].dt.year == 2023) & (phishing_data['label'] == 'spam')].shape[0]\n","print(\"Phishing Domains with Creation Year 2023 and Label 'spam':\", specific_creation_label_count)\n","\n","# Calculate the correlation between the number of name servers and domain age for phishing domains\n","correlation_ns_age = phishing_data['Name_Server_Count'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Name Server Count and Domain Age:\", correlation_ns_age)\n","\n","# Calculate the distribution of entropy values for phishing domains\n","entropy_distribution = phishing_data['Entropy'].value_counts()\n","print(\"Entropy Distribution:\")\n","print(entropy_distribution)\n","\n","# Calculate the percentage of numeric characters in phishing domains\n","numeric_percentage = phishing_data['Numeric_Percentage'].mean()\n","print(\"Numeric Percentage:\", numeric_percentage)\n","\n","# Count the number of phishing domains with an obfuscated \"@\" sign in email addresses\n","obfuscated_email_count = phishing_data[phishing_data['Obfuscated_Email'] == 1].shape[0]\n","print(\"Phishing Domains with Obfuscated Email Addresses:\", obfuscated_email_count)\n","\n","# Calculate the average length of the longest word in phishing domain names\n","average_longest_word_length = phishing_data['Longest_Word_Length'].mean()\n","print(\"Average Length of Longest Word:\", average_longest_word_length)\n","\n","# Calculate the correlation between domain age and the number of subdomains\n","correlation_subdomains_age = phishing_data['Subdomain_Count'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Subdomains and Domain Age:\", correlation_subdomains_age)\n","\n","# Calculate the distribution of label values (spam or not spam) in the dataset\n","label_distribution = phishing_data['Label'].value_counts()\n","print(\"Label Distribution:\")\n","print(label_distribution)\n","\n","# Count the number of phishing domains with an organization associated with them\n","domains_with_organization = phishing_data['Organization'].notnull().sum()\n","print(\"Phishing Domains with Organization:\", domains_with_organization)\n","\n","# Calculate the average Alexa Rank of the phishing domains\n","average_alexa_rank = phishing_data['Alexa_Rank'].mean()\n","print(\"Average Alexa Rank:\", average_alexa_rank)\n","\n","# Calculate the correlation between creation date and domain age for phishing domains\n","correlation_creation_age = phishing_data['Creation_Date'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Creation Date and Domain Age:\", correlation_creation_age)\n","\n","# Calculate the distribution of domain lengths for spam phishing domains\n","spam_domain_length_distribution = phishing_data[phishing_data['Label'] == 'spam']['Domain_Length'].value_counts()\n","print(\"Domain Length Distribution for Spam Phishing Domains:\")\n","print(spam_domain_length_distribution)\n","\n","# Count the number of phishing domains with a Page Rank greater than zero\n","page_rank_greater_than_zero = phishing_data[phishing_data['Page_Rank'] > 0].shape[0]\n","print(\"Phishing Domains with Page Rank > 0:\", page_rank_greater_than_zero)\n","\n","# Calculate the distribution of label values among different TLDs\n","tld_label_distribution = phishing_data.groupby(['TLD', 'Label']).size().unstack(fill_value=0)\n","print(\"Label Distribution among Different TLDs:\")\n","print(tld_label_distribution)\n","\n","# Check for common 2-grams in phishing domain names\n","common_2grams = phishing_data['2gram'].value_counts().head(5)\n","print(\"Common 2-grams in Domain Names:\")\n","print(common_2grams)\n","\n","# Calculate the average numeric percentage for spam phishing domains\n","average_numeric_percentage_spam = phishing_data[phishing_data['Label'] == 'spam']['Numeric_Percentage'].mean()\n","print(\"Average Numeric Percentage for Spam Phishing Domains:\", average_numeric_percentage_spam)\n","\n","# Count the number of phishing domains with a specific creation year\n","specific_creation_year_count = phishing_data[phishing_data['Creation_Date'].dt.year == 2021].shape[0]\n","print(\"Phishing Domains with Creation Year 2021:\", specific_creation_year_count)\n","\n","# Calculate the distribution of label values for phishing domains with a specific registrar\n","specific_registrar_label_distribution = phishing_data.groupby(['Registrar', 'Label']).size().unstack(fill_value=0)\n","print(\"Label Distribution for Phishing Domains with a Specific Registrar:\")\n","print(specific_registrar_label_distribution)\n","\n","# Calculate the average URL length for phishing domains\n","average_url_length = phishing_data['URL_Length'].mean()\n","print(\"Average URL Length:\", average_url_length)\n","\n","# Calculate the correlation between domain age and the number of hyphens in phishing domain names\n","correlation_hyphens_age = phishing_data['Hyphen_Count'].corr(phishing_data['Domain_Age'])\n","print(\"Correlation between Hyphen Count and Domain Age:\", correlation_hyphens_age)\n","\n","# Calculate the distribution of label values for phishing domains with a specific country\n","specific_country_label_distribution = phishing_data[phishing_data['Country'] == 'United States']['Label'].value_counts()\n","print(\"Label Distribution for Phishing Domains in the United States:\")\n","print(specific_country_label_distribution)\n","\n","# Count the number of phishing domains with a specific label and organization associated with them\n","specific_label_organization_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Organization'].notnull())].shape[0]\n","print(\"Phishing Domains with Label 'spam' and an Organization:\", specific_label_organization_count)\n","\n","# Calculate the average entropy for phishing domains with a specific label\n","average_entropy_label = phishing_data[phishing_data['Label'] == 'spam']['Entropy'].mean()\n","print(\"Average Entropy for Spam Phishing Domains:\", average_entropy_label)\n","\n","# Count the number of phishing domains with a specific TLD\n","specific_tld_count = phishing_data[phishing_data['TLD'] == 'com'].shape[0]\n","print(\"Phishing Domains with TLD 'com':\", specific_tld_count)\n","\n","# Calculate the distribution of label values for phishing domains with a specific organization\n","specific_organization_label_distribution = phishing_data[phishing_data['Organization'].notnull()]['Label'].value_counts()\n","print(\"Label Distribution for Phishing Domains with an Organization:\")\n","print(specific_organization_label_distribution)\n","\n","# Count the number of phishing domains with a specific label and creation year\n","specific_label_creation_year_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Creation_Date'].dt.year == 2022)].shape[0]\n","print(\"Phishing Domains with Label 'spam' and Creation Year 2022:\", specific_label_creation_year_count)\n","\n","# Calculate the average domain length for phishing domains with a specific label\n","average_domain_length_label = phishing_data[phishing_data['Label'] == 'spam']['Domain_Length'].mean()\n","print(\"Average Domain Length for Spam Phishing Domains:\", average_domain_length_label)\n","\n","# Calculate the correlation between the number of digits and the number of hyphens in phishing domain names\n","correlation_digits_hyphens = phishing_data['Digit_Count'].corr(phishing_data['Hyphen_Count'])\n","print(\"Correlation between Digit Count and Hyphen Count:\", correlation_digits_hyphens)\n","\n","# Count the number of phishing domains with a specific label and registrar associated with them\n","specific_label_registrar_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Registrar'].notnull())].shape[0]\n","print(\"Phishing Domains with Label 'spam' and a Registrar:\", specific_label_registrar_count)\n","\n","# Calculate the distribution of label values for phishing domains with a specific creation month\n","specific_creation_month_label_distribution = phishing_data[phishing_data['Creation_Date'].dt.month == 1]['Label'].value_counts()\n","print(\"Label Distribution for Phishing Domains Created in January:\")\n","print(specific_creation_month_label_distribution)\n","\n","# Calculate the average number of subdomains for phishing domains with a specific label\n","average_subdomain_count_label = phishing_data[phishing_data['Label'] == 'spam']['Subdomain_Count'].mean()\n","print(\"Average Subdomain Count for Spam Phishing Domains:\", average_subdomain_count_label)\n","\n","# Count the number of phishing domains with a specific label and creation month\n","specific_label_creation_month_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Creation_Date'].dt.month == 1)].shape[0]\n","print(\"Phishing Domains with Label 'spam' and Created in January:\", specific_label_creation_month_count)\n","\n","\n","# Calculate the average number of digits in phishing domain names with a specific label\n","average_digit_count_label = phishing_data[phishing_data['Label'] == 'spam']['Digit_Count'].mean()\n","print(\"Average Digit Count for Spam Phishing Domains:\", average_digit_count_label)\n","\n","# Calculate the correlation between the number of vowels and the number of digits in phishing domain names\n","correlation_vowels_digits = phishing_data['Vowel_Count'].corr(phishing_data['Digit_Count'])\n","print(\"Correlation between Vowel Count and Digit Count:\", correlation_vowels_digits)\n","\n","# Count the number of phishing domains with a specific label and a creation year before 2020\n","specific_label_creation_year_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Creation_Date'].dt.year < 2020)].shape[0]\n","print(\"Phishing Domains with Label 'spam' and Creation Year before 2020:\", specific_label_creation_year_count)\n","\n","# Calculate the distribution of label values for phishing domains with a specific URL length\n","specific_url_length_label_distribution = phishing_data[phishing_data['URL_Length'] > 50]['Label'].value_counts()\n","print(\"Label Distribution for Phishing Domains with URL Length > 50:\")\n","print(specific_url_length_label_distribution)\n","\n","# Calculate the average number of consonants in phishing domain names with a specific label\n","average_consonant_count_label = phishing_data[phishing_data['Label'] == 'spam']['Consonant_Count'].mean()\n","print(\"Average Consonant Count for Spam Phishing Domains:\", average_consonant_count_label)\n","\n","# Calculate the correlation between the number of subdomains and the number of vowels in phishing domain names\n","correlation_subdomains_vowels = phishing_data['Subdomain_Count'].corr(phishing_data['Vowel_Count'])\n","print(\"Correlation between Subdomain Count and Vowel Count:\", correlation_subdomains_vowels)\n","\n","# Count the number of phishing domains with a specific label and a creation month before July\n","specific_label_creation_month_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Creation_Date'].dt.month < 7)].shape[0]\n","print(\"Phishing Domains with Label 'spam' and Creation Month before July:\", specific_label_creation_month_count)\n","\n","# Calculate the distribution of label values for phishing domains with a specific registrar\n","specific_registrar_label_distribution = phishing_data[phishing_data['Registrar'] == 'GoDaddy']['Label'].value_counts()\n","print(\"Label Distribution for Phishing Domains with Registrar 'GoDaddy':\")\n","print(specific_registrar_label_distribution)\n","\n","# Calculate the average URL length for phishing domains with a specific label\n","average_url_length_label = phishing_data[phishing_data['Label'] == 'spam']['URL_Length'].mean()\n","print(\"Average URL Length for Spam Phishing Domains:\", average_url_length_label)\n","\n","# Calculate the correlation between the number of digits and the number of vowels in phishing domain names\n","correlation_digits_vowels = phishing_data['Digit_Count'].corr(phishing_data['Vowel_Count'])\n","print(\"Correlation between Digit Count and Vowel Count:\", correlation_digits_vowels)\n","\n","# Count the number of phishing domains with a specific label and a creation year after 2020\n","specific_label_creation_year_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Creation_Date'].dt.year > 2020)].shape[0]\n","print(\"Phishing Domains with Label 'spam' and Creation Year after 2020:\", specific_label_creation_year_count)\n","\n","# Calculate the distribution of label values for phishing domains with a specific organization\n","specific_organization_label_distribution = phishing_data[phishing_data['Organization'] == 'PayPal']['Label'].value_counts()\n","print(\"Label Distribution for Phishing Domains with Organization 'PayPal':\")\n","print(specific_organization_label_distribution)\n","\n","# Calculate the average domain length for phishing domains with a specific label\n","average_domain_length_label = phishing_data[phishing_data['Label'] == 'spam']['Domain_Length'].mean()\n","print(\"Average Domain Length for Spam Phishing Domains:\", average_domain_length_label)\n","\n","# Calculate the correlation between the number of digits and the number of hyphens in phishing domain names\n","correlation_digits_hyphens = phishing_data['Digit_Count'].corr(phishing_data['Hyphen_Count'])\n","print(\"Correlation between Digit Count and Hyphen Count:\", correlation_digits_hyphens)\n","\n","# Count the number of phishing domains with a specific label and a registrar associated with them\n","specific_label_registrar_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Registrar'].notnull())].shape[0]\n","print(\"Phishing Domains with Label 'spam' and a Registrar:\", specific_label_registrar_count)\n","\n","# Calculate the average domain length for phishing domains with a specific label\n","average_domain_length_label = phishing_data[phishing_data['Label'] == 'spam']['Domain_Length'].mean()\n","print(\"Average Domain Length for Spam Phishing Domains:\", average_domain_length_label)\n","\n","# Calculate the correlation between the number of digits and the number of hyphens in phishing domain names\n","correlation_digits_hyphens = phishing_data['Digit_Count'].corr(phishing_data['Hyphen_Count'])\n","print(\"Correlation between Digit Count and Hyphen Count:\", correlation_digits_hyphens)\n","\n","# Count the number of phishing domains with a specific label and a registrar associated with them\n","specific_label_registrar_count = phishing_data[(phishing_data['Label'] == 'spam') & (phishing_data['Registrar'].notnull())].shape[0]\n","print(\"Phishing Domains with Label 'spam' and a Registrar:\", specific_label_registrar_count)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"2n5iAcW0Psiy","executionInfo":{"status":"error","timestamp":1708329273554,"user_tz":-300,"elapsed":1562,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"28fac86f-66bf-4a51-9aa4-1ccf7ff138ac"},"execution_count":8,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'phishing_data' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-bc16b0445fa1>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Calculate the average domain age\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maverage_domain_age\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mphishing_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Domain_Age'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Average Domain Age:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maverage_domain_age\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Count the number of unique top-level domains (TLDs)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'phishing_data' is not defined"]}]},{"cell_type":"code","source":["categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n","categorical_cols"],"metadata":{"id":"GEAp9RqNfm7t","executionInfo":{"status":"aborted","timestamp":1708329273560,"user_tz":-300,"elapsed":15,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n","numerical_cols"],"metadata":{"id":"nKz8cM2nhV9k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708287480046,"user_tz":-300,"elapsed":11,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"d37916c3-93a2-4ace-ea0d-900efa532a36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['oc_8',\n"," 'hex_32',\n"," 'puny_coded',\n"," 'Page_Rank',\n"," 'Alexa_Rank',\n"," 'hex_8',\n"," 'oc_32',\n"," 'len',\n"," 'dec_8',\n"," 'entropy',\n"," 'numeric_percentage',\n"," 'subdomain',\n"," 'dec_32']"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["df[numerical_cols].cov()"],"metadata":{"id":"rGa-Mf_wEv7S","colab":{"base_uri":"https://localhost:8080/","height":457},"executionInfo":{"status":"ok","timestamp":1708287481765,"user_tz":-300,"elapsed":850,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"d72065e4-f066-4c58-8a46-9244ff45c989"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    oc_8  hex_32    puny_coded  Page_Rank    Alexa_Rank  \\\n","oc_8                 0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","hex_32               0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","puny_coded           0.0     0.0  4.682994e-03        0.0 -3.002332e+03   \n","Page_Rank            0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","Alexa_Rank           0.0     0.0 -3.002332e+03        0.0  3.907441e+12   \n","hex_8                0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","oc_32                0.0     0.0 -3.752174e-07        0.0 -4.239747e+01   \n","len                  0.0     0.0  1.016979e-02        0.0 -3.487781e+05   \n","dec_8                0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","entropy              0.0     0.0  2.251160e-03        0.0  1.900666e+04   \n","numeric_percentage   0.0     0.0  4.230893e-02        0.0 -5.947470e+05   \n","subdomain            0.0     0.0 -2.091274e-03        0.0 -6.766032e+04   \n","dec_32               0.0     0.0 -2.082456e-05        0.0 -8.488771e+02   \n","\n","                    hex_8         oc_32            len  dec_8       entropy  \\\n","oc_8                  0.0  0.000000e+00       0.000000    0.0      0.000000   \n","hex_32                0.0  0.000000e+00       0.000000    0.0      0.000000   \n","puny_coded            0.0 -3.752174e-07       0.010170    0.0      0.002251   \n","Page_Rank             0.0  0.000000e+00       0.000000    0.0      0.000000   \n","Alexa_Rank            0.0 -4.239747e+01 -348778.124499    0.0  19006.655059   \n","hex_8                 0.0  0.000000e+00       0.000000    0.0      0.000000   \n","oc_32                 0.0  7.974164e-05      -0.000580    0.0     -0.000067   \n","len                   0.0 -5.798301e-04      50.413738    0.0      3.484792   \n","dec_8                 0.0  0.000000e+00       0.000000    0.0      0.000000   \n","entropy               0.0 -6.667735e-05       3.484792    0.0      0.372322   \n","numeric_percentage    0.0  2.960336e-03      12.068714    0.0      0.540982   \n","subdomain             0.0 -1.550832e-05       1.216102    0.0      0.065474   \n","dec_32                0.0 -3.529587e-07      -0.025083    0.0     -0.005189   \n","\n","                    numeric_percentage     subdomain        dec_32  \n","oc_8                          0.000000      0.000000  0.000000e+00  \n","hex_32                        0.000000      0.000000  0.000000e+00  \n","puny_coded                    0.042309     -0.002091 -2.082456e-05  \n","Page_Rank                     0.000000      0.000000  0.000000e+00  \n","Alexa_Rank              -594747.039323 -67660.318164 -8.488771e+02  \n","hex_8                         0.000000      0.000000  0.000000e+00  \n","oc_32                         0.002960     -0.000016 -3.529587e-07  \n","len                          12.068714      1.216102 -2.508300e-02  \n","dec_8                         0.000000      0.000000  0.000000e+00  \n","entropy                       0.540982      0.065474 -5.188725e-03  \n","numeric_percentage           48.788973      0.169266  1.424681e-01  \n","subdomain                     0.169266      0.246877 -4.121135e-04  \n","dec_32                        0.142468     -0.000412  6.559620e-03  "],"text/html":["\n","  <div id=\"df-1ca2416c-067d-4e7c-b11e-9f3781a59b5b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oc_8</th>\n","      <th>hex_32</th>\n","      <th>puny_coded</th>\n","      <th>Page_Rank</th>\n","      <th>Alexa_Rank</th>\n","      <th>hex_8</th>\n","      <th>oc_32</th>\n","      <th>len</th>\n","      <th>dec_8</th>\n","      <th>entropy</th>\n","      <th>numeric_percentage</th>\n","      <th>subdomain</th>\n","      <th>dec_32</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>oc_8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>hex_32</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>puny_coded</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.682994e-03</td>\n","      <td>0.0</td>\n","      <td>-3.002332e+03</td>\n","      <td>0.0</td>\n","      <td>-3.752174e-07</td>\n","      <td>0.010170</td>\n","      <td>0.0</td>\n","      <td>0.002251</td>\n","      <td>0.042309</td>\n","      <td>-0.002091</td>\n","      <td>-2.082456e-05</td>\n","    </tr>\n","    <tr>\n","      <th>Page_Rank</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>Alexa_Rank</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-3.002332e+03</td>\n","      <td>0.0</td>\n","      <td>3.907441e+12</td>\n","      <td>0.0</td>\n","      <td>-4.239747e+01</td>\n","      <td>-348778.124499</td>\n","      <td>0.0</td>\n","      <td>19006.655059</td>\n","      <td>-594747.039323</td>\n","      <td>-67660.318164</td>\n","      <td>-8.488771e+02</td>\n","    </tr>\n","    <tr>\n","      <th>hex_8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>oc_32</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-3.752174e-07</td>\n","      <td>0.0</td>\n","      <td>-4.239747e+01</td>\n","      <td>0.0</td>\n","      <td>7.974164e-05</td>\n","      <td>-0.000580</td>\n","      <td>0.0</td>\n","      <td>-0.000067</td>\n","      <td>0.002960</td>\n","      <td>-0.000016</td>\n","      <td>-3.529587e-07</td>\n","    </tr>\n","    <tr>\n","      <th>len</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.016979e-02</td>\n","      <td>0.0</td>\n","      <td>-3.487781e+05</td>\n","      <td>0.0</td>\n","      <td>-5.798301e-04</td>\n","      <td>50.413738</td>\n","      <td>0.0</td>\n","      <td>3.484792</td>\n","      <td>12.068714</td>\n","      <td>1.216102</td>\n","      <td>-2.508300e-02</td>\n","    </tr>\n","    <tr>\n","      <th>dec_8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>entropy</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.251160e-03</td>\n","      <td>0.0</td>\n","      <td>1.900666e+04</td>\n","      <td>0.0</td>\n","      <td>-6.667735e-05</td>\n","      <td>3.484792</td>\n","      <td>0.0</td>\n","      <td>0.372322</td>\n","      <td>0.540982</td>\n","      <td>0.065474</td>\n","      <td>-5.188725e-03</td>\n","    </tr>\n","    <tr>\n","      <th>numeric_percentage</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.230893e-02</td>\n","      <td>0.0</td>\n","      <td>-5.947470e+05</td>\n","      <td>0.0</td>\n","      <td>2.960336e-03</td>\n","      <td>12.068714</td>\n","      <td>0.0</td>\n","      <td>0.540982</td>\n","      <td>48.788973</td>\n","      <td>0.169266</td>\n","      <td>1.424681e-01</td>\n","    </tr>\n","    <tr>\n","      <th>subdomain</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-2.091274e-03</td>\n","      <td>0.0</td>\n","      <td>-6.766032e+04</td>\n","      <td>0.0</td>\n","      <td>-1.550832e-05</td>\n","      <td>1.216102</td>\n","      <td>0.0</td>\n","      <td>0.065474</td>\n","      <td>0.169266</td>\n","      <td>0.246877</td>\n","      <td>-4.121135e-04</td>\n","    </tr>\n","    <tr>\n","      <th>dec_32</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-2.082456e-05</td>\n","      <td>0.0</td>\n","      <td>-8.488771e+02</td>\n","      <td>0.0</td>\n","      <td>-3.529587e-07</td>\n","      <td>-0.025083</td>\n","      <td>0.0</td>\n","      <td>-0.005189</td>\n","      <td>0.142468</td>\n","      <td>-0.000412</td>\n","      <td>6.559620e-03</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ca2416c-067d-4e7c-b11e-9f3781a59b5b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1ca2416c-067d-4e7c-b11e-9f3781a59b5b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1ca2416c-067d-4e7c-b11e-9f3781a59b5b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a3499890-37ec-4f69-bad9-47fd3ca2b402\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3499890-37ec-4f69-bad9-47fd3ca2b402')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a3499890-37ec-4f69-bad9-47fd3ca2b402 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[numerical_cols]\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"oc_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hex_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"puny_coded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 832.6983573902907,\n        \"min\": -3002.3318492344774,\n        \"max\": 0.04230892822510922,\n        \"samples\": [\n          -0.002091273927330803\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Page_Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alexa_Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1083729266803.2991,\n        \"min\": -594747.0393229036,\n        \"max\": 3907441357174.1978,\n        \"samples\": [\n          -67660.31816440888\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hex_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oc_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.758996145640983,\n        \"min\": -42.39746532952554,\n        \"max\": 0.0029603364827140307,\n        \"samples\": [\n          -1.5508321719319155e-05\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96735.2004684155,\n        \"min\": -348778.1244994647,\n        \"max\": 50.41373820063553,\n        \"samples\": [\n          1.2161021938371657\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"entropy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5271.394636859707,\n        \"min\": -0.005188725301581009,\n        \"max\": 19006.65505896926,\n        \"samples\": [\n          0.06547394260391015\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numeric_percentage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 164954.57759474913,\n        \"min\": -594747.0393229036,\n        \"max\": 48.78897308327687,\n        \"samples\": [\n          0.16926606837329405\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subdomain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18765.635064513113,\n        \"min\": -67660.31816440888,\n        \"max\": 1.2161021938371657,\n        \"samples\": [\n          0.2468766593874439\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 235.43888493416512,\n        \"min\": -848.8770989854328,\n        \"max\": 0.14246814696611623,\n        \"samples\": [\n          -0.000412113474163418\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df.columns"],"metadata":{"id":"UFIYhKis1n8K","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708287481766,"user_tz":-300,"elapsed":20,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"86167ba8-9a0d-42fe-d602-cde4d6a77013"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Domain_Age', 'sld', 'oc_8', 'Emails', 'hex_32', 'Domain_Name',\n","       'puny_coded', 'Page_Rank', 'Alexa_Rank', '3gram',\n","       'distance_from_bad_words', 'Country', 'hex_8', 'oc_32', 'len', 'typos',\n","       'Registrar', 'dec_8', '2gram', 'State', '1gram', 'obfuscate_at_sign',\n","       'entropy', 'numeric_percentage', 'Registrant_Name', 'subdomain',\n","       'char_distribution', 'shortened', 'longest_word', 'Name_Server_Count',\n","       'dec_32', 'Creation_Date_Time', 'Organization', 'tld', 'label'],\n","      dtype='object')"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["for col in categorical_cols:\n","  unique_values = df[col].nunique()\n","  print(f\"Column '{col}' has '{unique_values}' unique values.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n6D9wx-p1pMs","executionInfo":{"status":"ok","timestamp":1708287483585,"user_tz":-300,"elapsed":9,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"767f6e4e-a666-4db8-a002-1ff83a5bb480"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Column 'Domain_Age' has '40148' unique values.\n","Column 'sld' has '16338' unique values.\n","Column 'Emails' has '5494' unique values.\n","Column 'Domain_Name' has '14915' unique values.\n","Column '3gram' has '16180' unique values.\n","Column 'distance_from_bad_words' has '16393' unique values.\n","Column 'Country' has '217' unique values.\n","Column 'typos' has '3184' unique values.\n","Column 'Registrar' has '1034' unique values.\n","Column '2gram' has '16330' unique values.\n","Column 'State' has '1300' unique values.\n","Column '1gram' has '16340' unique values.\n","Column 'obfuscate_at_sign' has '2' unique values.\n","Column 'Registrant_Name' has '437' unique values.\n","Column 'char_distribution' has '23066' unique values.\n","Column 'shortened' has '3' unique values.\n","Column 'longest_word' has '8489' unique values.\n","Column 'Name_Server_Count' has '59' unique values.\n","Column 'Creation_Date_Time' has '12550' unique values.\n","Column 'Organization' has '4043' unique values.\n","Column 'tld' has '447' unique values.\n","Column 'label' has '4' unique values.\n"]}]},{"cell_type":"code","source":["for col in numerical_cols:\n","  unique_values = df[col].nunique()\n","  print(f\"Column '{col}' has '{unique_values}' unique values.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XAvFoHHB7kIU","executionInfo":{"status":"ok","timestamp":1708287484647,"user_tz":-300,"elapsed":17,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"b9ce6576-a208-4e43-f987-72f669f261b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Column 'oc_8' has '1' unique values.\n","Column 'hex_32' has '1' unique values.\n","Column 'puny_coded' has '2' unique values.\n","Column 'Page_Rank' has '1' unique values.\n","Column 'Alexa_Rank' has '8663' unique values.\n","Column 'hex_8' has '1' unique values.\n","Column 'oc_32' has '2' unique values.\n","Column 'len' has '77' unique values.\n","Column 'dec_8' has '1' unique values.\n","Column 'entropy' has '1878' unique values.\n","Column 'numeric_percentage' has '315' unique values.\n","Column 'subdomain' has '3' unique values.\n","Column 'dec_32' has '3' unique values.\n"]}]},{"cell_type":"code","source":["df[numerical_cols].cov()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"PynoUkET78bi","executionInfo":{"status":"ok","timestamp":1708287485996,"user_tz":-300,"elapsed":17,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"4d797dc0-7470-4098-9bdb-56f134d58062"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    oc_8  hex_32    puny_coded  Page_Rank    Alexa_Rank  \\\n","oc_8                 0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","hex_32               0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","puny_coded           0.0     0.0  4.682994e-03        0.0 -3.002332e+03   \n","Page_Rank            0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","Alexa_Rank           0.0     0.0 -3.002332e+03        0.0  3.907441e+12   \n","hex_8                0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","oc_32                0.0     0.0 -3.752174e-07        0.0 -4.239747e+01   \n","len                  0.0     0.0  1.016979e-02        0.0 -3.487781e+05   \n","dec_8                0.0     0.0  0.000000e+00        0.0  0.000000e+00   \n","entropy              0.0     0.0  2.251160e-03        0.0  1.900666e+04   \n","numeric_percentage   0.0     0.0  4.230893e-02        0.0 -5.947470e+05   \n","subdomain            0.0     0.0 -2.091274e-03        0.0 -6.766032e+04   \n","dec_32               0.0     0.0 -2.082456e-05        0.0 -8.488771e+02   \n","\n","                    hex_8         oc_32            len  dec_8       entropy  \\\n","oc_8                  0.0  0.000000e+00       0.000000    0.0      0.000000   \n","hex_32                0.0  0.000000e+00       0.000000    0.0      0.000000   \n","puny_coded            0.0 -3.752174e-07       0.010170    0.0      0.002251   \n","Page_Rank             0.0  0.000000e+00       0.000000    0.0      0.000000   \n","Alexa_Rank            0.0 -4.239747e+01 -348778.124499    0.0  19006.655059   \n","hex_8                 0.0  0.000000e+00       0.000000    0.0      0.000000   \n","oc_32                 0.0  7.974164e-05      -0.000580    0.0     -0.000067   \n","len                   0.0 -5.798301e-04      50.413738    0.0      3.484792   \n","dec_8                 0.0  0.000000e+00       0.000000    0.0      0.000000   \n","entropy               0.0 -6.667735e-05       3.484792    0.0      0.372322   \n","numeric_percentage    0.0  2.960336e-03      12.068714    0.0      0.540982   \n","subdomain             0.0 -1.550832e-05       1.216102    0.0      0.065474   \n","dec_32                0.0 -3.529587e-07      -0.025083    0.0     -0.005189   \n","\n","                    numeric_percentage     subdomain        dec_32  \n","oc_8                          0.000000      0.000000  0.000000e+00  \n","hex_32                        0.000000      0.000000  0.000000e+00  \n","puny_coded                    0.042309     -0.002091 -2.082456e-05  \n","Page_Rank                     0.000000      0.000000  0.000000e+00  \n","Alexa_Rank              -594747.039323 -67660.318164 -8.488771e+02  \n","hex_8                         0.000000      0.000000  0.000000e+00  \n","oc_32                         0.002960     -0.000016 -3.529587e-07  \n","len                          12.068714      1.216102 -2.508300e-02  \n","dec_8                         0.000000      0.000000  0.000000e+00  \n","entropy                       0.540982      0.065474 -5.188725e-03  \n","numeric_percentage           48.788973      0.169266  1.424681e-01  \n","subdomain                     0.169266      0.246877 -4.121135e-04  \n","dec_32                        0.142468     -0.000412  6.559620e-03  "],"text/html":["\n","  <div id=\"df-4700538f-b3f8-4279-bf5d-23f8b4ca7e03\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oc_8</th>\n","      <th>hex_32</th>\n","      <th>puny_coded</th>\n","      <th>Page_Rank</th>\n","      <th>Alexa_Rank</th>\n","      <th>hex_8</th>\n","      <th>oc_32</th>\n","      <th>len</th>\n","      <th>dec_8</th>\n","      <th>entropy</th>\n","      <th>numeric_percentage</th>\n","      <th>subdomain</th>\n","      <th>dec_32</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>oc_8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>hex_32</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>puny_coded</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.682994e-03</td>\n","      <td>0.0</td>\n","      <td>-3.002332e+03</td>\n","      <td>0.0</td>\n","      <td>-3.752174e-07</td>\n","      <td>0.010170</td>\n","      <td>0.0</td>\n","      <td>0.002251</td>\n","      <td>0.042309</td>\n","      <td>-0.002091</td>\n","      <td>-2.082456e-05</td>\n","    </tr>\n","    <tr>\n","      <th>Page_Rank</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>Alexa_Rank</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-3.002332e+03</td>\n","      <td>0.0</td>\n","      <td>3.907441e+12</td>\n","      <td>0.0</td>\n","      <td>-4.239747e+01</td>\n","      <td>-348778.124499</td>\n","      <td>0.0</td>\n","      <td>19006.655059</td>\n","      <td>-594747.039323</td>\n","      <td>-67660.318164</td>\n","      <td>-8.488771e+02</td>\n","    </tr>\n","    <tr>\n","      <th>hex_8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>oc_32</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-3.752174e-07</td>\n","      <td>0.0</td>\n","      <td>-4.239747e+01</td>\n","      <td>0.0</td>\n","      <td>7.974164e-05</td>\n","      <td>-0.000580</td>\n","      <td>0.0</td>\n","      <td>-0.000067</td>\n","      <td>0.002960</td>\n","      <td>-0.000016</td>\n","      <td>-3.529587e-07</td>\n","    </tr>\n","    <tr>\n","      <th>len</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.016979e-02</td>\n","      <td>0.0</td>\n","      <td>-3.487781e+05</td>\n","      <td>0.0</td>\n","      <td>-5.798301e-04</td>\n","      <td>50.413738</td>\n","      <td>0.0</td>\n","      <td>3.484792</td>\n","      <td>12.068714</td>\n","      <td>1.216102</td>\n","      <td>-2.508300e-02</td>\n","    </tr>\n","    <tr>\n","      <th>dec_8</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.0</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>entropy</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.251160e-03</td>\n","      <td>0.0</td>\n","      <td>1.900666e+04</td>\n","      <td>0.0</td>\n","      <td>-6.667735e-05</td>\n","      <td>3.484792</td>\n","      <td>0.0</td>\n","      <td>0.372322</td>\n","      <td>0.540982</td>\n","      <td>0.065474</td>\n","      <td>-5.188725e-03</td>\n","    </tr>\n","    <tr>\n","      <th>numeric_percentage</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.230893e-02</td>\n","      <td>0.0</td>\n","      <td>-5.947470e+05</td>\n","      <td>0.0</td>\n","      <td>2.960336e-03</td>\n","      <td>12.068714</td>\n","      <td>0.0</td>\n","      <td>0.540982</td>\n","      <td>48.788973</td>\n","      <td>0.169266</td>\n","      <td>1.424681e-01</td>\n","    </tr>\n","    <tr>\n","      <th>subdomain</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-2.091274e-03</td>\n","      <td>0.0</td>\n","      <td>-6.766032e+04</td>\n","      <td>0.0</td>\n","      <td>-1.550832e-05</td>\n","      <td>1.216102</td>\n","      <td>0.0</td>\n","      <td>0.065474</td>\n","      <td>0.169266</td>\n","      <td>0.246877</td>\n","      <td>-4.121135e-04</td>\n","    </tr>\n","    <tr>\n","      <th>dec_32</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-2.082456e-05</td>\n","      <td>0.0</td>\n","      <td>-8.488771e+02</td>\n","      <td>0.0</td>\n","      <td>-3.529587e-07</td>\n","      <td>-0.025083</td>\n","      <td>0.0</td>\n","      <td>-0.005189</td>\n","      <td>0.142468</td>\n","      <td>-0.000412</td>\n","      <td>6.559620e-03</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4700538f-b3f8-4279-bf5d-23f8b4ca7e03')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4700538f-b3f8-4279-bf5d-23f8b4ca7e03 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4700538f-b3f8-4279-bf5d-23f8b4ca7e03');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4e34178c-f7af-4370-8385-a7544dd32bc4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e34178c-f7af-4370-8385-a7544dd32bc4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4e34178c-f7af-4370-8385-a7544dd32bc4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[numerical_cols]\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"oc_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hex_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"puny_coded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 832.6983573902907,\n        \"min\": -3002.3318492344774,\n        \"max\": 0.04230892822510922,\n        \"samples\": [\n          -0.002091273927330803\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Page_Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alexa_Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1083729266803.2991,\n        \"min\": -594747.0393229036,\n        \"max\": 3907441357174.1978,\n        \"samples\": [\n          -67660.31816440888\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hex_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oc_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.758996145640983,\n        \"min\": -42.39746532952554,\n        \"max\": 0.0029603364827140307,\n        \"samples\": [\n          -1.5508321719319155e-05\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96735.2004684155,\n        \"min\": -348778.1244994647,\n        \"max\": 50.41373820063553,\n        \"samples\": [\n          1.2161021938371657\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"entropy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5271.394636859707,\n        \"min\": -0.005188725301581009,\n        \"max\": 19006.65505896926,\n        \"samples\": [\n          0.06547394260391015\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numeric_percentage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 164954.57759474913,\n        \"min\": -594747.0393229036,\n        \"max\": 48.78897308327687,\n        \"samples\": [\n          0.16926606837329405\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subdomain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18765.635064513113,\n        \"min\": -67660.31816440888,\n        \"max\": 1.2161021938371657,\n        \"samples\": [\n          0.2468766593874439\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 235.43888493416512,\n        \"min\": -848.8770989854328,\n        \"max\": 0.14246814696611623,\n        \"samples\": [\n          -0.000412113474163418\n        ],\n        \"num_unique_values\": 9,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["df[numerical_cols].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"rypctL1y-Cgo","executionInfo":{"status":"ok","timestamp":1708287487319,"user_tz":-300,"elapsed":21,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"b851cd9d-9b4c-479c-8427-5bbce80eceb9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   oc_8  hex_32  puny_coded  Page_Rank  Alexa_Rank  hex_8  oc_32  len  dec_8  \\\n","0     0       0           0         -1        -1.0      0      0    8      0   \n","1     0       0           0         -1        -1.0      0      0    8      0   \n","2     0       0           0         -1   7119972.0      0      0    8      0   \n","3     0       0           0         -1   7119972.0      0      0   10      0   \n","4     0       0           0         -1        -1.0      0      0    8      0   \n","\n","    entropy  numeric_percentage  subdomain  dec_32  \n","0  1.780639           53.846154        0.0       0  \n","1  2.625000            0.000000        0.0       0  \n","2  2.625000            0.000000        0.0       0  \n","3  2.989735            0.000000        1.0       0  \n","4  2.030639           53.846154        0.0       0  "],"text/html":["\n","  <div id=\"df-a253294b-54ec-4f8f-8995-a478721dc0af\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>oc_8</th>\n","      <th>hex_32</th>\n","      <th>puny_coded</th>\n","      <th>Page_Rank</th>\n","      <th>Alexa_Rank</th>\n","      <th>hex_8</th>\n","      <th>oc_32</th>\n","      <th>len</th>\n","      <th>dec_8</th>\n","      <th>entropy</th>\n","      <th>numeric_percentage</th>\n","      <th>subdomain</th>\n","      <th>dec_32</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>1.780639</td>\n","      <td>53.846154</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2.625000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>7119972.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2.625000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>7119972.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>2.989735</td>\n","      <td>0.000000</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>2.030639</td>\n","      <td>53.846154</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a253294b-54ec-4f8f-8995-a478721dc0af')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a253294b-54ec-4f8f-8995-a478721dc0af button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a253294b-54ec-4f8f-8995-a478721dc0af');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d54bd32-0a12-4870-8c8a-1509154b042b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d54bd32-0a12-4870-8c8a-1509154b042b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d54bd32-0a12-4870-8c8a-1509154b042b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[numerical_cols]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"oc_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hex_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"puny_coded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Page_Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": -1,\n        \"max\": -1,\n        \"samples\": [\n          -1\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alexa_Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3899769.82092773,\n        \"min\": -1.0,\n        \"max\": 7119972.0,\n        \"samples\": [\n          7119972.0\n        ],\n        \"num_unique_values\": 2,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hex_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oc_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 8,\n        \"max\": 10,\n        \"samples\": [\n          10\n        ],\n        \"num_unique_values\": 2,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"entropy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49207537707523175,\n        \"min\": 1.7806390622,\n        \"max\": 2.9897352854,\n        \"samples\": [\n          2.625\n        ],\n        \"num_unique_values\": 4,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numeric_percentage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.4927530964573,\n        \"min\": 0.0,\n        \"max\": 53.8461538462,\n        \"samples\": [\n          0.0\n        ],\n        \"num_unique_values\": 2,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subdomain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.447213595499958,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"samples\": [\n          1.0\n        ],\n        \"num_unique_values\": 2,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec_32\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"samples\": [\n          0\n        ],\n        \"num_unique_values\": 1,\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df = df.drop(columns=['oc_8', 'hex_32', 'Page_Rank', 'hex_8', 'dec_8','oc_32','dec_32'], axis=1)"],"metadata":{"id":"tgndYQgO8B3K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Filter remaining numerical columns\n","remaining_numerical_cols = [col for col in df.columns if col in numerical_cols]\n","\n","# Print unique values for remaining numerical columns\n","for col in remaining_numerical_cols:\n","    unique_values = df[col].nunique()\n","    print(f\"Column '{col}' has '{unique_values}' unique values.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TFhCmxJCAuO1","executionInfo":{"status":"ok","timestamp":1708287490284,"user_tz":-300,"elapsed":21,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"ebf84eef-dccb-477b-aa86-2de13b927aca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Column 'puny_coded' has '2' unique values.\n","Column 'Alexa_Rank' has '8663' unique values.\n","Column 'len' has '77' unique values.\n","Column 'entropy' has '1878' unique values.\n","Column 'numeric_percentage' has '315' unique values.\n","Column 'subdomain' has '3' unique values.\n"]}]},{"cell_type":"code","source":["remaining_numerical_cols"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sYha5TnYEQ6P","executionInfo":{"status":"ok","timestamp":1708287491572,"user_tz":-300,"elapsed":6,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"a0a78d10-4bc2-4bc4-f84f-d231c197af65"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['puny_coded',\n"," 'Alexa_Rank',\n"," 'len',\n"," 'entropy',\n"," 'numeric_percentage',\n"," 'subdomain']"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["df['label'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tmTR6cp1LCk_","executionInfo":{"status":"ok","timestamp":1708287493256,"user_tz":-300,"elapsed":10,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"9eadfa61-69a2-4320-e2cb-2a4c1c5f1ff8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['spam', 'phishing', 'malware', 'benign'], dtype=object)"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Define mapping dictionary\n","label_mapping = {'spam': 0, 'phishing': 1, 'malware': 2, 'benign': 3}\n","\n","# Replace labels in 'label' column\n","df['label'] = df['label'].map(label_mapping)\n","\n","# Now the labels in the 'label' column have been mapped to numerical values"],"metadata":{"id":"f0mUFFD8LZYz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.impute import SimpleImputer\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.base import BaseEstimator, TransformerMixin"],"metadata":{"id":"a_bJrNNzCBZy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Select categorical columns\n","categorical_columns = ['Domain_Age', 'sld', 'Emails', 'Domain_Name', '3gram', 'distance_from_bad_words',\n","                       'Country', 'typos', 'Registrar', '2gram', 'State', '1gram', 'obfuscate_at_sign',\n","                       'Registrant_Name', 'char_distribution', 'shortened', 'longest_word',\n","                       'Name_Server_Count', 'Creation_Date_Time', 'Organization', 'tld']\n","\n","# Apply label encoding to each categorical column\n","label_encoders = {}\n","for col in categorical_columns:\n","    label_encoders[col] = LabelEncoder()\n","    df[col] = label_encoders[col].fit_transform(df[col])\n","\n","# Now the categorical columns have been label encoded\n"],"metadata":{"id":"qfMycIpDFIEo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"F9kxB5jzag0X","executionInfo":{"status":"ok","timestamp":1708287504352,"user_tz":-300,"elapsed":18,"user":{"displayName":"Muhammad Abuzar","userId":"18309048335817189121"}},"outputId":"53834a17-b60b-4817-9a53-303b3f3f2354"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Domain_Age   sld  Emails  Domain_Name  puny_coded  Alexa_Rank  3gram  \\\n","0        3974   361     871         6351           0        -1.0     33   \n","1        3975  8188     871         9423           0        -1.0   8106   \n","2        1908  8188     871         9422           0   7119972.0   8106   \n","3        1909  8188     871         9422           0   7119972.0   8106   \n","4        3976   363     871         6352           0        -1.0     34   \n","\n","   distance_from_bad_words  Country  len  typos  Registrar  2gram  State  \\\n","0                      135       83    8   2139        424     33    963   \n","1                     7824       83    8   2097        424   8185    963   \n","2                     7824       83    8   2139        424   8185    963   \n","3                     7824       83   10   2139        424   8185    963   \n","4                      232       83    8   2139        424     34    963   \n","\n","   1gram  obfuscate_at_sign   entropy  numeric_percentage  Registrant_Name  \\\n","0     33                  0  1.780639           53.846154              244   \n","1   8188                  0  2.625000            0.000000              244   \n","2   8188                  0  2.625000            0.000000              244   \n","3   8188                  0  2.989735            0.000000              244   \n","4     34                  0  2.030639           53.846154              244   \n","\n","   subdomain  char_distribution  shortened  longest_word  Name_Server_Count  \\\n","0        0.0                138          0            10                 39   \n","1        0.0               6391          0          2371                 54   \n","2        0.0               6391          0          2371                 54   \n","3        1.0               6568          0          2371                 54   \n","4        0.0                228          0             1                 39   \n","\n","   Creation_Date_Time  Organization  tld  label  \n","0               12033          3480   80      0  \n","1               12023          3480  289      0  \n","2                8730          3480   80      0  \n","3                8730          3480   80      0  \n","4               12025          3480   80      0  "],"text/html":["\n","  <div id=\"df-d3a87488-33e4-410d-84ea-5a3f451fda0e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Domain_Age</th>\n","      <th>sld</th>\n","      <th>Emails</th>\n","      <th>Domain_Name</th>\n","      <th>puny_coded</th>\n","      <th>Alexa_Rank</th>\n","      <th>3gram</th>\n","      <th>distance_from_bad_words</th>\n","      <th>Country</th>\n","      <th>len</th>\n","      <th>typos</th>\n","      <th>Registrar</th>\n","      <th>2gram</th>\n","      <th>State</th>\n","      <th>1gram</th>\n","      <th>obfuscate_at_sign</th>\n","      <th>entropy</th>\n","      <th>numeric_percentage</th>\n","      <th>Registrant_Name</th>\n","      <th>subdomain</th>\n","      <th>char_distribution</th>\n","      <th>shortened</th>\n","      <th>longest_word</th>\n","      <th>Name_Server_Count</th>\n","      <th>Creation_Date_Time</th>\n","      <th>Organization</th>\n","      <th>tld</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3974</td>\n","      <td>361</td>\n","      <td>871</td>\n","      <td>6351</td>\n","      <td>0</td>\n","      <td>-1.0</td>\n","      <td>33</td>\n","      <td>135</td>\n","      <td>83</td>\n","      <td>8</td>\n","      <td>2139</td>\n","      <td>424</td>\n","      <td>33</td>\n","      <td>963</td>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>1.780639</td>\n","      <td>53.846154</td>\n","      <td>244</td>\n","      <td>0.0</td>\n","      <td>138</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>39</td>\n","      <td>12033</td>\n","      <td>3480</td>\n","      <td>80</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3975</td>\n","      <td>8188</td>\n","      <td>871</td>\n","      <td>9423</td>\n","      <td>0</td>\n","      <td>-1.0</td>\n","      <td>8106</td>\n","      <td>7824</td>\n","      <td>83</td>\n","      <td>8</td>\n","      <td>2097</td>\n","      <td>424</td>\n","      <td>8185</td>\n","      <td>963</td>\n","      <td>8188</td>\n","      <td>0</td>\n","      <td>2.625000</td>\n","      <td>0.000000</td>\n","      <td>244</td>\n","      <td>0.0</td>\n","      <td>6391</td>\n","      <td>0</td>\n","      <td>2371</td>\n","      <td>54</td>\n","      <td>12023</td>\n","      <td>3480</td>\n","      <td>289</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1908</td>\n","      <td>8188</td>\n","      <td>871</td>\n","      <td>9422</td>\n","      <td>0</td>\n","      <td>7119972.0</td>\n","      <td>8106</td>\n","      <td>7824</td>\n","      <td>83</td>\n","      <td>8</td>\n","      <td>2139</td>\n","      <td>424</td>\n","      <td>8185</td>\n","      <td>963</td>\n","      <td>8188</td>\n","      <td>0</td>\n","      <td>2.625000</td>\n","      <td>0.000000</td>\n","      <td>244</td>\n","      <td>0.0</td>\n","      <td>6391</td>\n","      <td>0</td>\n","      <td>2371</td>\n","      <td>54</td>\n","      <td>8730</td>\n","      <td>3480</td>\n","      <td>80</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1909</td>\n","      <td>8188</td>\n","      <td>871</td>\n","      <td>9422</td>\n","      <td>0</td>\n","      <td>7119972.0</td>\n","      <td>8106</td>\n","      <td>7824</td>\n","      <td>83</td>\n","      <td>10</td>\n","      <td>2139</td>\n","      <td>424</td>\n","      <td>8185</td>\n","      <td>963</td>\n","      <td>8188</td>\n","      <td>0</td>\n","      <td>2.989735</td>\n","      <td>0.000000</td>\n","      <td>244</td>\n","      <td>1.0</td>\n","      <td>6568</td>\n","      <td>0</td>\n","      <td>2371</td>\n","      <td>54</td>\n","      <td>8730</td>\n","      <td>3480</td>\n","      <td>80</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3976</td>\n","      <td>363</td>\n","      <td>871</td>\n","      <td>6352</td>\n","      <td>0</td>\n","      <td>-1.0</td>\n","      <td>34</td>\n","      <td>232</td>\n","      <td>83</td>\n","      <td>8</td>\n","      <td>2139</td>\n","      <td>424</td>\n","      <td>34</td>\n","      <td>963</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>2.030639</td>\n","      <td>53.846154</td>\n","      <td>244</td>\n","      <td>0.0</td>\n","      <td>228</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>12025</td>\n","      <td>3480</td>\n","      <td>80</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3a87488-33e4-410d-84ea-5a3f451fda0e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d3a87488-33e4-410d-84ea-5a3f451fda0e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d3a87488-33e4-410d-84ea-5a3f451fda0e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0609c710-cd6c-424a-b8f8-d3b707263f0c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0609c710-cd6c-424a-b8f8-d3b707263f0c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0609c710-cd6c-424a-b8f8-d3b707263f0c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# Define the file path for the new CSV file\n","#new_csv_file_path = \"V1_project.csv\"\n","\n","# Save the modified DataFrame to a new CSV file\n","#df.to_csv(new_csv_file_path, index=False)\n","\n","#print(f\"DataFrame with dropped columns saved to '{new_csv_file_path}'.\")"],"metadata":{"id":"aFX6rZejajRl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.columns"],"metadata":{"id":"p2M3COssbh0E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","\n","# Select numerical columns\n","numerical_columns = ['Domain_Age', 'sld', 'Emails', 'Domain_Name', 'puny_coded',\n","       'Alexa_Rank', '3gram', 'distance_from_bad_words', 'Country', 'len',\n","       'typos', 'Registrar', '2gram', 'State', '1gram', 'obfuscate_at_sign',\n","       'entropy', 'numeric_percentage', 'Registrant_Name', 'subdomain',\n","       'char_distribution', 'shortened', 'longest_word', 'Name_Server_Count',\n","       'Creation_Date_Time', 'Organization', 'tld']\n","\n","# Initialize MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","# Apply MinMaxScaler to each numerical column\n","df[numerical_columns] = scaler.fit_transform(df[numerical_columns])\n","\n","# Now the numerical columns have been scaled using MinMaxScaler\n"],"metadata":{"id":"OG94E_2UfKwa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"wlR-d_WNgD1M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define the file path for the new CSV file\n","#new_csv_file_path = \"V1_project_for_model.csv\"\n","\n","# Save the modified DataFrame to a new CSV file\n","#df.to_csv(new_csv_file_path, index=False)\n","\n","#print(f\"DataFrame with dropped columns saved to '{new_csv_file_path}'.\")"],"metadata":{"id":"Zw3qw_B8gYvx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, confusion_matrix"],"metadata":{"id":"QKHM7v8Zgc6w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split the features and labels\n","X = df.drop('label', axis=1)\n","y = df['label']\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"8I_tf8KFkGQl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Random Forest\n","rf_model = RandomForestClassifier()\n","rf_model.fit(X_train, y_train)\n","rf_predictions = rf_model.predict(X_test)\n","rf_accuracy = accuracy_score(y_test, rf_predictions)\n","rf_cm = confusion_matrix(y_test, rf_predictions)\n","print(\"Random Forest Accuracy:\", rf_accuracy)\n","print(\"Random Forest Confusion Matrix:\")\n","print(rf_cm)"],"metadata":{"id":"4pHtoixzkHq9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Gradient Boosting (XGBoost)\n","xgb_model = XGBClassifier()\n","xgb_model.fit(X_train, y_train)\n","xgb_predictions = xgb_model.predict(X_test)\n","xgb_accuracy = accuracy_score(y_test, xgb_predictions)\n","xgb_cm = confusion_matrix(y_test, xgb_predictions)\n","print(\"XGBoost Accuracy:\", xgb_accuracy)\n","print(\"XGBoost Confusion Matrix:\")\n","print(xgb_cm)"],"metadata":{"id":"yzIsAjjlkI55"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Neural Network\n","nn_model = MLPClassifier()\n","nn_model.fit(X_train, y_train)\n","nn_predictions = nn_model.predict(X_test)\n","nn_accuracy = accuracy_score(y_test, nn_predictions)\n","nn_cm = confusion_matrix(y_test, nn_predictions)\n","print(\"Neural Network Accuracy:\", nn_accuracy)\n","print(\"Neural Network Confusion Matrix:\")\n","print(nn_cm)"],"metadata":{"id":"BwWTDVslkKTD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plotting Confusion Matrix\n","models = ['Random Forest', 'XGBoost', 'Neural Network']\n","cms = [rf_cm, xgb_cm, nn_cm]\n","\n","fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 5))\n","\n","for i, ax in enumerate(axes):\n","    sns.heatmap(cms[i], annot=True, fmt='d', cmap='Blues', ax=ax)\n","    ax.set_xlabel('Predicted Labels')\n","    ax.set_ylabel('True Labels')\n","    ax.set_title(models[i])\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"1HKaokvAMpyX"},"execution_count":null,"outputs":[]}]}